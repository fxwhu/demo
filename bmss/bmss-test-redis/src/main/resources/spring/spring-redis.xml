<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd ">

	<context:component-scan base-package="com.bmss.redis" />



	<bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:redis.properties</value>
            </list>
        </property>
    </bean>

	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大连接数 -->
		<property name="maxTotal" value="80" />
		<!-- 最大最大空闲连接数 -->
		<property name="maxIdle" value="30" />
		<!--最小空闲连接数 -->
		<property name="minIdle" value="10" />
		<!--最大等待wait时间 -->
		<property name="maxWaitMillis" value="30000" />
		<!-- 获得一个jedis实例的时候是否检查连接可用性（ping()） -->
		<property name="testOnBorrow" value="true" />
		<!-- return 一个jedis实例给pool时，是否检查连接可用性（ping()） -->
		<property name="testOnReturn" value="true" />
		<!-- idle状态监测用异步线程evict进行检查， -->
		<property name="testWhileIdle" value="true" />
	</bean>



	<bean id="sentinelConfig"
		class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
		<property name="master">
			<bean class="org.springframework.data.redis.connection.RedisNode">
				<property name="name" value="${redis.sentinel.master.name}">
				</property>
			</bean>
		</property>
		<property name="sentinels">
				<set>
					<bean class="org.springframework.data.redis.connection.RedisNode">
						<constructor-arg name="host" value="${sentinels1.host}"></constructor-arg>
						<constructor-arg name="port" value="${sentinels1.port}"></constructor-arg>
					</bean>
					<bean class="org.springframework.data.redis.connection.RedisNode">
						<constructor-arg name="host" value="${sentinels2.host}"/>
						<constructor-arg name="port" value="${sentinels2.port}"/>
					</bean>
					<bean class="org.springframework.data.redis.connection.RedisNode">
						<constructor-arg name="host" value="${sentinels3.host}"/>
						<constructor-arg name="port" value="${sentinels3.port}"/>
					</bean>
				</set>
		</property>
	</bean>

	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:usePool="true">
		<constructor-arg ref="sentinelConfig" name="sentinelConfig" />
		<constructor-arg ref="jedisPoolConfig" name="poolConfig"/>
	</bean>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory" >
	  <!-- <property name="keySerializer">
	        <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
	    </property>-->
		<!--redis事务开启-->
		<property name="enableTransactionSupport" value="true"/>

	   <property name="keySerializer">
	        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	    </property>
	    <property name="valueSerializer">
	        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
	    </property> 
	   
	    <property name="hashKeySerializer">  
	        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
	    </property>  
	    <property name="hashValueSerializer">
	        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	         <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" /> -->
	    </property>
	</bean>
	
	
	<!-- <bean id="scriptExecutor" class="org.springframework.data.redis.core.script.DefaultScriptExecutor">
	   <property name="template" ref="redisTemplate"></property>
	</bean> -->
	
	<!-- <bean id="" class="org.springframework.data.redis.connection.DefaultStringRedisConnection"></bean> -->
		
	<bean id="script1" class="org.springframework.data.redis.core.script.DefaultRedisScript">
        <property name="location" value="classpath:lua/test.lua"/>
        <property name="resultType" value="java.lang.String"/>
    </bean>

	<bean id="script2" class="org.springframework.data.redis.core.script.DefaultRedisScript">
        <property name="location" value="classpath:lua/test2.lua"/>
        <property name="resultType" value="java.lang.String"/>
    </bean>



	<bean id="messageListener"
		  class="org.springframework.data.redis.listener.adapter.MessageListenerAdapter">
		<constructor-arg>
			<bean class="com.bmss.redis.MyMessageListener" />
		</constructor-arg>
	</bean>

	<bean id="redisContainer"
		  class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="messageListeners">
			<map>
				<entry key-ref="messageListener">
					<list>
						<!--<bean class="org.springframework.data.redis.listener.ChannelTopic">
							<constructor-arg value="springtv" />
						</bean>-->
						<!--<bean class="org.springframework.data.redis.listener.PatternTopic">
							<constructor-arg value="hello*" />
						</bean>-->
						<bean class="org.springframework.data.redis.listener.ChannelTopic">
						    <constructor-arg value="springtv" />
					    </bean>
						<!--<bean class="org.springframework.data.redis.listener.ChannelTopic">
						    <constructor-arg value="hello.111" />
					    </bean>-->
						<!--<bean class="org.springframework.data.redis.listener.PatternTopic">
							<constructor-arg value="*" />
						</bean>-->
					</list>
				</entry>
			</map>
		</property>
	</bean>

</beans>